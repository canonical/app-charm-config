// Code generated by app-charm-config; DO NOT EDIT.
package {{ .PackageName }}

type CharmConfig struct {
     Options ConfigOptions
     Proxy ProxyConfig
     {{- if .Integrations }}
         Integrations Integrations
     {{- end }}
}

type ConfigOptions struct {
     BaseURL string `env:"{{ .CommonPrefix }}BASE_URL"`
     Port int `env:"{{ .CommonPrefix }}PORT"`
     MetricsPort *int `env:"{{ .CommonPrefix }}METRICS_PORT"`
     MetricsPath *string `env:"{{ .CommonPrefix }}METRICS_PATH"`
     SecretKey *string `env:"{{ .CommonPrefix }}SECRET_KEY"`
     {{- if .Options }}
         UserConfigOptions
     {{- end }}
}

{{ if .Options }}
    type UserConfigOptions struct {
    {{- range .Options }}
        {{ .GoVarName }} {{ .GoVarType }} `env:"{{ .EnvVarName }}"`
    {{- end }}
    }
{{- end }}

type ProxyConfig struct {
     HTTPProxy *string `env:"HTTP_PROXY"`
     HTTPSProxy *string `env:"HTTPS_PROXY"`
     NoProxy []string `env:"NO_PROXY"`
}

{{ if .Integrations }}
   type Integrations struct {
   {{- range .Integrations }}
       {{ .GoName }} {{ .GoName }}Integration {{ if .IsDatabase }}`envPrefix:"{{ .DatabasePrefix }}"`{{ end }}
   {{- end }}
   }
{{ end }}


{{ if .HasDatabaseIntegrations }}

   {{- range .Integrations }}
       {{ if .IsDatabase }}
       type {{ .GoName }}Integration struct {
            DatabaseIntegration
       }
       {{ end }}
    {{ end }}

    // Common fields to all database integrations. The environment variables
    // specific database will have a prefix depending on the database.
    type DatabaseIntegration struct {
         ConnectString string  `env:"DB_CONNECT_STRING"`
         Scheme        string  `env:"DB_SCHEME"`
         NetLoc        string  `env:"DB_NETLOC"`
         Path          string  `env:"DB_PATH"`
         Params        string  `env:"DB_PARAMS"`
         Query         string  `env:"DB_QUERY"`
         Fragment      string  `env:"DB_FRAGMENT"`
         Username      *string `env:"DB_USERNAME"`
         Hostname      *string `env:"DB_HOSTNAME"`
         Password      *string `env:"DB_PASSWORD"`
         Port          *int    `env:"DB_PORT"`
         Name          *string `env:"DB_NAME"`
    }

    func (di DatabaseIntegration) IsActive() bool {
         return di.ConnectString != ""
    }

{{ end }}

{{ if .Integrations.s3 }}
   {{- with .Integrations.s3 }}
   type S3Integration struct {
        AccessKey    string  `env:"{{ $.CommonPrefix }}S3_ACCESS_KEY"`
        SecretKey    string  `env:"{{ $.CommonPrefix }}S3_SECRET_KEY"`
        Region       *string `env:"{{ $.CommonPrefix }}S3_REGION"`
        StorageClass *string `env:"{{ $.CommonPrefix }}S3_STORAGE_CLASS"`
        Bucket       string  `env:"{{ $.CommonPrefix }}S3_BUCKET"`
        Endpoint     *string `env:"{{ $.CommonPrefix }}S3_ENDPOING"`
        Path         *string `env:"{{ $.CommonPrefix }}S3_PATH"`
        ApiVersion   *string `env:"{{ $.CommonPrefix }}S3_API_VERSION"`
        UriStyle        *string `env:"{{ $.CommonPrefix }}S3_URI_STYLE"`
        AddressingStyle *string `env:"{{ $.CommonPrefix }}S3_ADDRESSING_STYLE"`
        Attributes *string `env:"{{ $.CommonPrefix }}S3_ATTRIBUTES"`
        TLSCAChain *string `env:"{{ $.CommonPrefix }}S3_TLS_CA_CHAIN"`
    }

    func (s3 S3Integration) IsActive() bool {
        if s3.AccessKey == "" {
           return false
        }
        return true
    }
   {{ end }}
{{ end }}


{{ if .Integrations.saml }}
   {{- with .Integrations.saml }}
   type SAMLIntegration struct {
        EntityID                string  `env:"{{ $.CommonPrefix }}SAML_ENTITY_ID"`
        MetadataURL             *string `env:"{{ $.CommonPrefix }}SAML_METADATA_URL"`
        SingleSignOnRedirectURL string  `env:"{{ $.CommonPrefix }}SAML_SINGLE_SIGN_ON_REDIRECT_URL"`
        SigningCertificate      string  `env:"{{ $.CommonPrefix }}SAML_SIGNING_CERTIFICATE"`
    }

    func (si SAMLIntegration) IsActive() bool {
        if si.EntityID == "" {
            return false
        }
        return true
    }

   {{ end }}
{{ end }}

{{- range .Integrations }}
    func (_ {{ .GoName }}Integration) IsOptional() bool {
         return {{ .Optional }}
    }
{{ end }}
